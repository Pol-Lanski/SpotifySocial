PRD: Spotify Playlist Comment Extension (MVP, 0 Auth)

1. Overview

We are building a browser extension that overlays a comment system on the Spotify Web Player (https://open.spotify.com/*).
When a user views a playlist or track inside Spotify Web, they can open a side panel and see/post comments. All users with the extension share the same comment thread (no authentication in MVP).

Goal for hackathon MVP:
	‚Ä¢	Show a working extension that overlays UI on Spotify Web.
	‚Ä¢	Allow posting and reading comments tied to a playlist (and optionally to individual tracks).
	‚Ä¢	Store comments in a simple shared backend (Supabase/Firebase, or even a JSON API).

‚∏ª

2. User Stories

Core
	‚Ä¢	As a user on a playlist page, I can open a comments panel and see all comments left for this playlist by other extension users.
	‚Ä¢	As a user, I can post a comment into this playlist‚Äôs thread. My comment appears immediately in the panel (optimistic UI).
	‚Ä¢	As a user on a track row, I see a comment bubble icon if there are comments for this track. Clicking it opens the comments panel filtered to that track.
	‚Ä¢	As a user, I don‚Äôt need an account. Everyone sees the same data (playlist-level or track-level).

Nice-to-have (time permitting)
	‚Ä¢	Reactions (üëçüòÇüî•).
	‚Ä¢	Delete (soft delete, only by whoever posted).
	‚Ä¢	Invite code for private threads.

‚∏ª

3. Technical Architecture

Extension
	‚Ä¢	Manifest V3 extension.
	‚Ä¢	Content script injected into https://open.spotify.com/*.
	‚Ä¢	MutationObserver + history.pushState listener to detect Spotify route changes (playlist ‚Üí track ‚Üí home).
	‚Ä¢	Inject a Shadow DOM container into the page for our UI, preventing CSS conflicts.
	‚Ä¢	UI framework: Preact/React in content script.
	‚Ä¢	Styling: TailwindCSS compiled at build time into content script bundle.

Backend
	‚Ä¢	Supabase (preferred) or Firebase.
	‚Ä¢	DB schema:

comments (
  id UUID PRIMARY KEY,
  playlist_id TEXT NOT NULL,
  track_uri TEXT NULL,
  text TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT now()
)


	‚Ä¢	API:
	‚Ä¢	GET /comments?playlist_id=<id>[&track_uri=<uri>]
	‚Ä¢	POST /comments { playlist_id, track_uri?, text }

No authentication: open endpoints for MVP (security by obscurity, can lock down later).

‚∏ª

4. UI/UX

Placement
	‚Ä¢	Playlist Page:
	‚Ä¢	A floating button (‚Äúüí¨ Comments‚Äù) anchored bottom-right.
	‚Ä¢	Clicking opens a right-side drawer (~400px wide).
	‚Ä¢	Drawer Layout:
	‚Ä¢	Header: ‚ÄúComments for [Playlist Name]‚Äù
	‚Ä¢	Tabs: Playlist | This Track
	‚Ä¢	Comment list (scrollable, newest last).
	‚Ä¢	Composer input box at bottom: [Text field + ‚ÄúSend‚Äù button].
	‚Ä¢	Track Rows:
	‚Ä¢	Each row shows a tiny bubble icon if comments exist for that track.
	‚Ä¢	Clicking bubble ‚Üí opens drawer focused on ‚ÄúThis Track.‚Äù

Style
	‚Ä¢	Match Spotify‚Äôs dark theme (black/gray background, white text).
	‚Ä¢	Comments styled like chat bubbles.
	‚Ä¢	Use minimal visual footprint (avoid breaking Spotify layout).

‚∏ª

5. Functional Requirements
	1.	Detect Playlist Context
	‚Ä¢	Parse playlist ID from URL (/playlist/<playlist_id>).
	‚Ä¢	Pass playlist_id to backend for fetching comments.
	2.	Detect Track Context
	‚Ä¢	Track rows contain a data-testid or aria-label.
	‚Ä¢	Extract track URI.
	‚Ä¢	Bubble icons dynamically attached only to visible rows (virtualized list ‚Üí use IntersectionObserver).
	3.	Comment Lifecycle
	‚Ä¢	On load, fetch comments for playlist (and track if selected).
	‚Ä¢	Display existing comments.
	‚Ä¢	On submit:
	‚Ä¢	POST to backend.
	‚Ä¢	Optimistically render comment.
	‚Ä¢	Refresh thread via subscription (Supabase Realtime) or polling (fallback).

‚∏ª

6. Non-Functional Requirements
	‚Ä¢	Performance: UI must not slow down Spotify scroll.
	‚Ä¢	Resilience: If backend is offline, show ‚ÄúComments unavailable‚Äù state.
	‚Ä¢	Privacy: No auth, no user IDs. Only text, playlist_id, and track_uri stored.
	‚Ä¢	Portability: Should work on Chrome/Brave/Edge. Firefox support optional.

‚∏ª

7. Stretch Goals
	‚Ä¢	User-set nicknames stored in local extension storage.
	‚Ä¢	Emoji reactions.
	‚Ä¢	Private playlist comments (invite code).
	‚Ä¢	Identity layer (Spotify OAuth or Sign-in With Ethereum).

‚∏ª

8. Risks / Pitfalls
	‚Ä¢	Spotify DOM may change; selectors must be resilient.
	‚Ä¢	SPA navigation requires reliable re-mounting.
	‚Ä¢	Open backend ‚Üí vulnerable to spam (acceptable for hackathon).
	‚Ä¢	Moderation not implemented in MVP.

‚∏ª
